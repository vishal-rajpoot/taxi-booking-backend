name: Deploying to EC2 staging

on:
  push:
    branches:
      - taxi-booking-server

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22.x
          # cache: 'npm' # cache dependencies for faster installs

      - name: Install dependencies
        run: npm install

      - name: Run ESLint check
        run: |
          echo "Running ESLint..."
          npm run lint
        # If ESLint fails (non-zero exit), the workflow will stop here
        continue-on-error: false

      - name: Debug Secrets
        env:
        #   PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        #   HOST: ${{ secrets.EC2_HOST }}
        #   USER: ${{ secrets.EC2_USER }}
          TARGET_DIR: /home/ubuntu/taxi-booking-server
        run: |
          echo "PRIVATE_KEY is set: $([ -n "$PRIVATE_KEY" ] && echo 'yes' || echo 'no')"
          echo "HOST is set: $([ -n "$HOST" ] && echo 'yes' || echo 'no')"
          echo "USER is set: $([ -n "$USER" ] && echo 'yes' || echo 'no')"
          echo "TARGET_DIR is set: $([ -n "$TARGET_DIR" ] && echo 'yes' || echo 'no')"
          echo "TARGET_DIR length: ${#TARGET_DIR}"
          if [ -z "$TARGET_DIR" ]; then echo "TARGET_DIR is empty in debug step!"; exit 1; fi

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          TARGET_DIR: /home/ubuntu/taxi-booking-server
        run: |
          echo "Deploy secrets check:"
          echo "TARGET_DIR is set: $([ -n "$TARGET_DIR" ] && echo 'yes' || echo 'no')"
          echo "TARGET_DIR length: ${#TARGET_DIR}"
          if [ -z "$TARGET_DIR" ]; then echo "TARGET_DIR is empty in deploy step!"; exit 1; fi
          echo "Using TARGET_DIR: $TARGET_DIR"
          echo "$PRIVATE_KEY" > private_key
          chmod 600 private_key
          echo "Testing SSH connection..."
          ssh -o StrictHostKeyChecking=no -i private_key $USER@$HOST "whoami" || { echo "SSH connection failed"; exit 1; }
          echo "Deploying to EC2..."
          ssh -o StrictHostKeyChecking=no -i private_key $USER@$HOST "cd '$TARGET_DIR' && pwd && git fetch origin && git status && git pull origin taxi-booking-server --verbose && git log -1 --oneline && npm install && pm2 reload all --update-env" || { echo "Deployment failed"; exit 1; }
          rm -f private_key
